What happens when you initialize a repository? Why do you need to do it?
	When initializing a repository, an empty ".git" folder is created automatically. This folder stores
	all information and snapshots of current folder.
	I need to do it because this command will make an empty repository which is used later to store information of
	current directory. A repository will contain a ".git" folder which is used in version control program called Git.



How is the staging area different from the working directory and the repository? What value do you think it offers?
	Staging area is like an virtual intermediate part between directory and repository. It helps to prepare what
	files to be added to repository. Moreover, it helps user to confirm themselves that which files are needed to
	update, which files are not. Then staging area will be a place to collect all of needed files to add to 
	repository.



How can you use the staging area to make sure you have one commit per logical change?
	You use "git diff" to make sure what you have changed in your working directory. Then you commit JUST A logical change from your working directory to staging area.
	Next, you use "git diff --staged" to make sure the change between staging area and repository is your wanted
	logical change. That way, you will make sure whether what you're going to commit is logical change.
	All in all, you can DOUBLE CHECK your CHANGE.



What are some situations when branches would be helpful in keeping your history organized? How would branches
help?
	When you want to develop different versions from the current version. For instance, in one next version, you
	want to translate language to another language. In another next version, you want to fix and optimize some
	functions. While in another next version, you want to add more functions.
	And then finally, after working with these different versions, maybe you want to merge them together.



How do the diagrams help you visualize the branch structure?
	The diagrams draw out all of your commits and each branch name attached to it.
	You can see which commit is father of which commit.



What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	The result is a version which is a combination of two different versions. This is done automatically and
	is very accurate and fast.
	We represent in the diagram to keep track of parents of merging commit and for further branching and
	merging.



What are the pros and cons of Git's automatic merging vs always doing merges manually?
	Automatic merging will save time for apparent merges.
	We just need to do merging when there's a conflict, and Git doesn't know for sure how to resolve this kind of merge.
	Always doing merges will waste a lot of time.